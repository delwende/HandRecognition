#include "opencv2/objdetect/objdetect.hpp"
#include "opencv2/highgui/highgui.hpp"
#include "opencv2/imgproc/imgproc.hpp"
#include "opencv2/video/tracking.hpp"
#include "opencv2/ml/ml.hpp"
#include <iostream>
#include <fstream>

#include <cctype>
#include <iostream>
#include <iterator>
#include <stdio.h>

using namespace std;
using namespace cv;

static void help()
{
	cout << "\nThis program demonstrates the cascade recognizer. Now you can use Haar or LBP features.\n"
		"This classifier can recognize many kinds of rigid objects, once the appropriate classifier is trained.\n"
		"It's most known use is for faces.\n"
		"Usage:\n"
		"./facedetect [--cascade=<cascade_path> this is the primary trained classifier such as frontal face]\n"
		"   [--nested-cascade[=nested_cascade_path this an optional secondary classifier such as eyes]]\n"
		"   [--scale=<image scale greater or equal to 1, try 1.3 for example>]\n"
		"   [--try-flip]\n"
		"   [filename|camera_index]\n\n"
		"see facedetect.cmd for one call:\n"
		"./facedetect --cascade=\"../../data/haarcascades/haarcascade_frontalface_alt.xml\" --nested-cascade=\"../../data/haarcascades/haarcascade_eye.xml\" --scale=1.3\n\n"
		"During execution:\n\tHit any key to quit.\n"
		"\tUsing OpenCV version " << CV_VERSION << "\n" << endl;
}

void detectAndDraw(Mat& img, CascadeClassifier& cascade,
	CascadeClassifier& nestedCascade,
	double scale, bool tryflip, vector<Rect>& faces, vector<Rect>& faces2);

void myCamShift(Mat img, Rect selection, CvCapture* capture);

string cascadeName = "d:/OpenCV/opencv/sources/data/haarcascades/haarcascade_frontalface_alt.xml";
string nestedCascadeName = "d:/OpenCV/opencv/sources/data/haarcascades/haarcascade_eye_tree_eyeglasses.xml";

int main(int argc, const char** argv)
{
	CvCapture* capture = 0;
	Mat frame, frameCopy, image;
	const string scaleOpt = "--scale=";
	size_t scaleOptLen = scaleOpt.length();
	const string cascadeOpt = "--cascade=";
	size_t cascadeOptLen = cascadeOpt.length();
	const string nestedCascadeOpt = "--nested-cascade";
	size_t nestedCascadeOptLen = nestedCascadeOpt.length();
	const string tryFlipOpt = "--try-flip";
	size_t tryFlipOptLen = tryFlipOpt.length();
	string inputName;
	bool tryflip = false;
	vector<Rect> faces, faces2;
	Rect face;
	bool flag = false;

	help();

	CascadeClassifier cascade, nestedCascade;
	double scale = 1;

	for (int i = 1; i < argc; i++)
	{
		cout << "Processing " << i << " " << argv[i] << endl;
		if (cascadeOpt.compare(0, cascadeOptLen, argv[i], cascadeOptLen) == 0)
		{
			cascadeName.assign(argv[i] + cascadeOptLen);
			cout << "  from which we have cascadeName= " << cascadeName << endl;
		}
		else if (nestedCascadeOpt.compare(0, nestedCascadeOptLen, argv[i], nestedCascadeOptLen) == 0)
		{
			if (argv[i][nestedCascadeOpt.length()] == '=')
				nestedCascadeName.assign(argv[i] + nestedCascadeOpt.length() + 1);
			if (!nestedCascade.load(nestedCascadeName))
				cerr << "WARNING: Could not load classifier cascade for nested objects" << endl;
		}
		else if (scaleOpt.compare(0, scaleOptLen, argv[i], scaleOptLen) == 0)
		{
			if (!sscanf(argv[i] + scaleOpt.length(), "%lf", &scale) || scale < 1)
				scale = 1;
			cout << " from which we read scale = " << scale << endl;
		}
		else if (tryFlipOpt.compare(0, tryFlipOptLen, argv[i], tryFlipOptLen) == 0)
		{
			tryflip = true;
			cout << " will try to flip image horizontally to detect assymetric objects\n";
		}
		else if (argv[i][0] == '-')
		{
			cerr << "WARNING: Unknown option %s" << argv[i] << endl;
		}
		else
			inputName.assign(argv[i]);
	}

	if (!cascade.load(cascadeName))
	{
		cerr << "ERROR: Could not load classifier cascade" << endl;
		help();
		return -1;
	}

	if (inputName.empty() || (isdigit(inputName.c_str()[0]) && inputName.c_str()[1] == '\0'))
	{
		capture = cvCaptureFromCAM(inputName.empty() ? 0 : inputName.c_str()[0] - '0');
		int c = inputName.empty() ? 0 : inputName.c_str()[0] - '0';
		if (!capture) cout << "Capture from CAM " << c << " didn't work" << endl;
	}
	else if (inputName.size())
	{
		image = imread(inputName, 1);
		if (image.empty())
		{
			capture = cvCaptureFromAVI(inputName.c_str());
			if (!capture) cout << "Capture from AVI didn't work" << endl;
		}
	}
	else
	{
		image = imread("lena.jpg", 1);
		if (image.empty()) cout << "Couldn't read lena.jpg" << endl;
	}

	cvNamedWindow("result", 1);

	if (capture)
	{
		cout << "In capture ..." << endl;
		for (;;)
		{
			IplImage* iplImg = cvQueryFrame(capture);
			frame = iplImg;
			if (frame.empty())
				break;
			if (iplImg->origin == IPL_ORIGIN_TL)
				frame.copyTo(frameCopy);
			else
				flip(frame, frameCopy, 0);
			if (faces2.empty() && faces.empty()) {
				detectAndDraw(frameCopy, cascade, nestedCascade, scale, tryflip, faces, faces2);
			}
			else {
				if (!flag) {
					cout <<"if1" << endl;
					flag = true;
					if (!faces2.empty()) {
						face = faces2[0];
						break;
						//myCamShift(frameCopy, faces2[0]);

					}
					if (!faces.empty()) {
						face = faces[0];
						break;
						//myCamShift(frameCopy, faces[0]);
					}
				}
			}
			
			//if (waitKey(10) >= 0)
			//	goto _cleanup_;
		}
		if (flag) {
			cout << "if2" << endl;
			myCamShift(frameCopy, face, capture);
		}

		waitKey(0);

	_cleanup_:
		cvReleaseCapture(&capture);
	}
	else
	{
		cout << "In image read" << endl;
		if (!image.empty())
		{
			detectAndDraw(image, cascade, nestedCascade, scale, tryflip, faces, faces2);
			waitKey(0);
		}
		else if (!inputName.empty())
		{
			/* assume it is a text file containing the
			list of the image filenames to be processed - one per line */
			FILE* f = fopen(inputName.c_str(), "rt");
			if (f)
			{
				char buf[1000 + 1];
				while (fgets(buf, 1000, f))
				{
					int len = (int)strlen(buf), c;
					while (len > 0 && isspace(buf[len - 1]))
						len--;
					buf[len] = '\0';
					cout << "file " << buf << endl;
					image = imread(buf, 1);
					if (!image.empty())
					{
						detectAndDraw(image, cascade, nestedCascade, scale, tryflip, faces, faces2);
						c = waitKey(0);
						if (c == 27 || c == 'q' || c == 'Q')
							break;
					}
					else
					{
						cerr << "Aw snap, couldn't read image " << buf << endl;
					}
				}
				fclose(f);
			}
		}
	}

	cvDestroyWindow("result");

	return 0;
}

void detectAndDraw(Mat& img, CascadeClassifier& cascade,
	CascadeClassifier& nestedCascade,
	double scale, bool tryflip, vector<Rect>& faces, vector<Rect>& faces2)
{
	int i = 0;
	double t = 0;

	const static Scalar colors[] = { CV_RGB(0,0,255),
		CV_RGB(0,128,255),
		CV_RGB(0,255,255),
		CV_RGB(0,255,0),
		CV_RGB(255,128,0),
		CV_RGB(255,255,0),
		CV_RGB(255,0,0),
		CV_RGB(255,0,255) };
	Mat gray, smallImg(cvRound(img.rows / scale), cvRound(img.cols / scale), CV_8UC1);

	cvtColor(img, gray, CV_BGR2GRAY);
	resize(gray, smallImg, smallImg.size(), 0, 0, INTER_LINEAR);
	equalizeHist(smallImg, smallImg);

	t = (double)cvGetTickCount();
	cascade.detectMultiScale(smallImg, faces,
		1.1, 2, 0
		//|CV_HAAR_FIND_BIGGEST_OBJECT
		//|CV_HAAR_DO_ROUGH_SEARCH
		| CV_HAAR_SCALE_IMAGE
		,
		Size(30, 30));
	if (tryflip)
	{
		flip(smallImg, smallImg, 1);
		cascade.detectMultiScale(smallImg, faces2,
			1.1, 2, 0
			//|CV_HAAR_FIND_BIGGEST_OBJECT
			//|CV_HAAR_DO_ROUGH_SEARCH
			| CV_HAAR_SCALE_IMAGE
			,
			Size(30, 30));
		for (vector<Rect>::const_iterator r = faces2.begin(); r != faces2.end(); r++)
		{
			faces.push_back(Rect(smallImg.cols - r->x - r->width, r->y, r->width, r->height));
		}
	}
	t = (double)cvGetTickCount() - t;
	printf("detection time = %g ms\n", t / ((double)cvGetTickFrequency()*1000.));
	for (vector<Rect>::const_iterator r = faces.begin(); r != faces.end(); r++, i++)
	{
		Mat smallImgROI;
		vector<Rect> nestedObjects;
		Point center;
		Scalar color = colors[i % 8];
		int radius;

		double aspect_ratio = (double)r->width / r->height;
		if (0.75 < aspect_ratio && aspect_ratio < 1.3)
		{
			center.x = cvRound((r->x + r->width*0.5)*scale);
			center.y = cvRound((r->y + r->height*0.5)*scale);
			radius = cvRound((r->width + r->height)*0.25*scale);
			circle(img, center, radius, color, 3, 8, 0);
		}
		else
			rectangle(img, cvPoint(cvRound(r->x*scale), cvRound(r->y*scale)),
				cvPoint(cvRound((r->x + r->width - 1)*scale), cvRound((r->y + r->height - 1)*scale)),
				color, 3, 8, 0);
		if (nestedCascade.empty())
			continue;
		smallImgROI = smallImg(*r);
		nestedCascade.detectMultiScale(smallImgROI, nestedObjects,
			1.1, 2, 0
			//|CV_HAAR_FIND_BIGGEST_OBJECT
			//|CV_HAAR_DO_ROUGH_SEARCH
			//|CV_HAAR_DO_CANNY_PRUNING
			| CV_HAAR_SCALE_IMAGE
			,
			Size(30, 30));
		for (vector<Rect>::const_iterator nr = nestedObjects.begin(); nr != nestedObjects.end(); nr++)
		{
			center.x = cvRound((r->x + nr->x + nr->width*0.5)*scale);
			center.y = cvRound((r->y + nr->y + nr->height*0.5)*scale);
			radius = cvRound((nr->width + nr->height)*0.25*scale);
			circle(img, center, radius, color, 3, 8, 0);
		}
	}

}

Rect cliping(Rect rect, int height, int width)
{
	Rect newRect;
	newRect.width = rect.width;
	newRect.height = rect.height;
	newRect.x = rect.x;
	newRect.y = rect.y;

	if (newRect.x < 0) {
		newRect.x = 0;
		if (rect.x + rect.width <= 0)
			newRect.width = 1;
		else
			newRect.width = rect.x + rect.width;
	}
	if (newRect.y < 0) {
		newRect.y = 0;
		if (rect.y + rect.height <= 0)
			newRect.height = 1;
		else
			newRect.height = rect.y + rect.height;
	}

	if (newRect.x + newRect.width > width) {
		newRect.width = width - newRect.x;
	}

	if (newRect.y + newRect.height > height) {
		newRect.height = height - newRect.y;
	}

	return newRect;
}

void myCamShift(Mat image, Rect selection, CvCapture* capture)
{
	bool backprojMode = true;
	int trackObject = -1;
	Point origin;
	int vmin = 10, vmax = 106, smin = 30;
	Rect trackWindow;
	int hbins = 30, sbins = 32;
	int histSize[] = { hbins, sbins };
	float hranges[] = { 0, 180 };
	float sranges[] = { 0, 256 };
	const float* ranges[] = { hranges, sranges };
	int hsize = 16;
	//float hranges[] = { 0,180 };
	const float* phranges = hranges;

	Mat frame, hsv, hue, mask, histimg = Mat::zeros(200, 320, CV_8UC3), backproj;
	MatND hist;
	bool paused = false;
	
	for (;;) {
		IplImage* iplImg = cvQueryFrame(capture);
		image = iplImg;
		cvtColor(image, hsv, COLOR_BGR2HSV);
		if (trackObject)
		{
			int _vmin = vmin, _vmax = vmax;

			inRange(hsv, Scalar(0, smin, MIN(_vmin, _vmax)),
				Scalar(180, 256, MAX(_vmin, _vmax)), mask);
			int ch[] = { 0, 0 };
			int channels[] = { 0, 1 };
			hue.create(hsv.size(), hsv.depth());
			mixChannels(&hsv, 1, &hue, 1, ch, 1);

			if (trackObject < 0)
			{
				//Mat roi(hue, selection), maskroi(mask, selection);
				Mat roi(hsv, selection);
				//calcHist(&roi, 1, 0, maskroi, hist, 1, &hsize, &phranges);
				calcHist(&hsv, 1, channels, Mat(), hist, 2, histSize, ranges, true, false);
				//normalize(hist, hist, 0, 255, CV_MINMAX);
				double maxVal = 0;
				minMaxLoc(hist, 0, &maxVal, 0, 0);

				/*
				for (int h = 0; h < hbins; h++)
				for (int s = 0; s < sbins; s++)
				{
				float 	binVal = hist.at<float>(h, s);
				int intensity = cvRound(binVal * 255 / maxVal);
				rectangle(histImg, Point(h*scale, s*scale), Point((h + 1)*scale - 1, (s + 1)*scale - 1), Scalar::all(intensity), CV_FILLED);
				}*/

				trackWindow = selection;
				trackObject = 1;
				/*
				histimg = Scalar::all(0);
				int binW = histimg.cols / hsize;
				Mat buf(1, hsize, CV_8UC3);
				for (int i = 0; i < hsize; i++)
				buf.at<Vec3b>(i) = Vec3b(saturate_cast<uchar>(i*180. / hsize), 255, 255);
				cvtColor(buf, buf, CV_HSV2BGR);

				for (int i = 0; i < hsize; i++)
				{
				int val = saturate_cast<int>(hist.at<float>(i)*histimg.rows / 255);
				rectangle(histimg, Point(i*binW, histimg.rows),
				Point((i + 1)*binW, histimg.rows - val),
				Scalar(buf.at<Vec3b>(i)), -1, 8);
				}*/
			}
			//calcBackProject(&hue, 1, 0, hist, backproj, &phranges);
			//normalize(hist, hist, 0, 255, NORM_MINMAX);
			//imshow("", hist);
			calcBackProject(&hsv, 1, channels, hist, backproj, ranges);
			backproj &= mask;
			RotatedRect trackBox = CamShift(backproj, trackWindow,
				TermCriteria(CV_TERMCRIT_EPS | CV_TERMCRIT_ITER, 10, 1));
			if (trackWindow.area() <= 1)
			{
				int cols = backproj.cols, rows = backproj.rows, r = (MIN(cols, rows) + 5) / 6;
				trackWindow = Rect(trackWindow.x - r, trackWindow.y - r,
					trackWindow.x + r, trackWindow.y + r) &
					Rect(0, 0, cols, rows);
			}

			int margin = 10;
			Rect trackBoxFace = Rect(trackBox.boundingRect().x - margin, 0, trackBox.boundingRect().width + margin, backproj.rows);

			Rect trackRect = cliping(trackBoxFace, backproj.rows, backproj.cols);

			for (int i = trackRect.y; i < backproj.rows; i++) {
				for (int j = trackRect.x; j < trackRect.x + trackRect.width; j++) {
					backproj.at<uchar>(i, j) = 0;
				}
			}

			Rect trackAllWindow = Rect(0, 0, image.cols, image.rows);
			RotatedRect trackBoxHand = CamShift(backproj, trackAllWindow,
				TermCriteria(CV_TERMCRIT_EPS | CV_TERMCRIT_ITER, 10, 1));

			ellipse(image, trackBoxHand, Scalar(0, 0, 255), 3, CV_AA);

			if (waitKey(30) == 32) { // 32 correspond to space bar
									 //cout << "Space bar ";
				Rect rectHand = cliping(trackBoxHand.boundingRect(), image.rows, image.cols);
				Mat hand2 = backproj(rectHand);
				resize(hand2, hand2, Size(16, 16), 0, 0, INTER_LINEAR);
				//imshow("new_ hand", hand2);
				//The image is converted in the adequate format, here floats on 32bits
				hand2.convertTo(hand2, CV_32FC1);

				Mat img = hand2.reshape(0, 1);

				CvANN_MLP mlp;
				mlp.load("result2.txt");
				CvMat* mlp_response = cvCreateMat(1, 26, CV_32F);
				int best_class;
				CvMat sample = img;
				CvPoint max_loc = { 0,0 };
				mlp.predict(&sample, mlp_response);
				cvMinMaxLoc(mlp_response, 0, 0, 0, &max_loc, 0);
				best_class = max_loc.x + 'A';
				if (best_class == 'O')
					cout << "Prediction " << "O" << endl;
				if (best_class == 'C')
					cout << "Prediction " << "C" << endl;
				if (best_class == 'L')
					cout << "Prediction " << "L" << endl;


				/*int c = 108;
				if (c > 96 && c < 123) {

				c -= 32;
				char b = (char)c;

				ofstream os("letter.txt", ios::out | ios::app);

				os << b;

				os << ", ";
				os << format(img, "csv") << endl;
				os.close();
				}*/

			}
		}
		imshow("result", image);
		imshow("bp", backproj);
	}

}

